from typing import Final

from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, Contact, FSInputFile
from aiogram.filters import Command, CommandStart

from keyboards.inline import instructions_kb, start_kb


router = Router(name=__name__)

HELP_TEXT: Final[str] = (
    "‚ùì <b>–ü–æ–º–æ—â—å</b>\n"
    "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ ¬´–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é¬ª –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É.\n"
    "‚Ä¢ –î–ª—è —Å–≤—è–∑–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —É–∫–∞–∂–∏—Ç–µ ID –∞–∫–∫–∞—É–Ω—Ç–∞ (–≤ –ª–µ–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è).\n"
    "‚Ä¢ –ö–æ–º–∞–Ω–¥—ã: /menu, /help, /about"
)

ABOUT_TEXT: Final[str] = (
    "‚ÑπÔ∏è <b>–û –±–æ—Ç–µ</b>\n"
    "–ë–æ—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —Å –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏ –¥–ª—è —á–∞—Å—Ç—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π —Å–æ —Å—Ç–∞–Ω—Ü–∏—è–º–∏ –∏ –ø–∞—É—ç—Ä–±–∞–Ω–∫–∞–º–∏."
)


@router.message(CommandStart())
async def start(message: Message) -> None:
    await message.answer_photo(
        photo=FSInputFile("images/start.jpg"),
        caption="üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫.\n\n–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:",
        reply_markup=start_kb(),
    )


@router.callback_query(F.data == "to_menu")
async def to_start(callback: CallbackQuery) -> None:
    await callback.message.answer("–ö–æ–º–∞–Ω–¥—ã:\n", reply_markup=start_kb())
    await callback.answer()


@router.callback_query(F.data == "to_commands")
async def to_main_menu(callback: CallbackQuery) -> None:
    await callback.message.answer(
        "üìã –°–∞–º—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:", reply_markup=instructions_kb()
    )
    await callback.answer()


@router.callback_query(F.data == "to_help")
async def to_help(callback: CallbackQuery) -> None:
    await callback.message.answer(HELP_TEXT, reply_markup=start_kb())
    await callback.answer()


@router.callback_query(F.data == "to_about")
async def to_about(callback: CallbackQuery) -> None:
    await callback.message.answer(ABOUT_TEXT, reply_markup=start_kb())
    await callback.answer()


@router.callback_query(F.data == "to_support")
async def to_sent_contact_support(callback: CallbackQuery) -> None:

    await callback.message.answer(
        text=(
            "üìû <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞</b>\n\n"
            "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –≤—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏.\n\n"
            f"üë§ –í–∞—à ID: <code>{callback.message.from_user.id}</code>"
        )
    )
    await callback.message.answer_contact(
        phone_number="+79999999999",
        first_name="–í–∞—Å—è",
        last_name="–ü—É–ø–∫–∏–Ω",
        vcard="BEGIN:VCARD\nVERSION:3.0\nFN:–í–∞—Å—è –ü—É–ø–∫–∏–Ω\nTEL:+79999999999\nEND:VCARD",
        disable_notification=True,
    )
    await callback.answer()


########################################################################


@router.message(Command("menu"))
async def to_start(message: Message) -> None:
    await message.answer("–ö–æ–º–∞–Ω–¥—ã:\n", reply_markup=start_kb())


@router.message(Command("commands"))
async def menu_cmd(message: Message) -> None:
    await message.answer(
        "üìã –°–∞–º—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:", reply_markup=instructions_kb()
    )


@router.message(Command("help"))
async def help_cmd(message: Message) -> None:
    await message.answer(HELP_TEXT, reply_markup=start_kb())


@router.message(Command("about"))
async def about_cmd(message: Message) -> None:
    await message.answer(ABOUT_TEXT, reply_markup=start_kb())


@router.message(Command("support"))
async def sent_contact_support(message: Message) -> None:
    await message.answer(
        text=(
            "üìû <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞</b>\n\n"
            "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –≤—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏.\n\n"
            f"üë§ –í–∞—à ID: <code>{message.from_user.id}</code>"
        )
    )

    await message.answer_contact(
        phone_number="+79999999999",
        first_name="–í–∞—Å—è",
        last_name="–ü—É–ø–∫–∏–Ω",
        vcard="BEGIN:VCARD\nVERSION:3.0\nFN:–í–∞—Å—è –ü—É–ø–∫–∏–Ω\nTEL:+79999999999\nEND:VCARD",
    )
